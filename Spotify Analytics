-- For this project, I downloaded Spotify data from Kaggle.
-- Then I created a table to insert Spotify data into.
-- Finally, I performed analytics on the data using SQL. 

-- Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

-- Then I inserted the Spotify Data .csv into the table.

-- Next, I explored the data using the following SQL. 

-- First i wanted to see what song has the highest danceability.
SELECT MAX(danceability), track_name
FROM Spotifydata;

-- Then i wanted to see what the top 5 most popular songs are.
SELECT Popularity, track_name
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 5;

-- Then i discovered that higher energy songs have the most popularity.
SELECT popularity, energy 
FROM BIT_DB.Spotifydata
WHERE Popularity >=90
ORDER BY Popularity DESC;

-- Then i used a case statment to see what the letter pitch was based on the number.
SELECT track_name, song_key,
CASE 
WHEN song_key = 0 THEN 'C'
WHEN song_key = 1 THEN 'C#'
WHEN song_key = 2 THEN 'D'
WHEN Song_KEY = 3 THEN 'D#'
WHEN song_key = 4 THEN 'E'
WHEN song_key = 5 THEN 'F'
WHEN song_key = 6 THEN 'F#'
WHEN song_key = 7 THEN 'G'
WHEN song_key = 8 THEN 'G#'
WHEN song_key = 9 THEN 'A'
WHEN song_key = 10 THEN 'A#'
WHEN song_key = 11 THEN 'B'
ELSE 'undetected'
END AS PItch_class
FROM BIT_DB.Spotifydata;









